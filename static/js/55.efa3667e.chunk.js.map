{"version":3,"file":"static/js/55.efa3667e.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contacts/Contacts.jsx","components/pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;","import { useEffect, useState } from 'react';\nimport {\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Box,\n  Typography\n} from '@mui/material';\nimport { message } from 'antd';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts, deleteContacts, getAllContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/auth/selectors';\n\nconst ContactsUser = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  \nuseEffect(() => {\n dispatch(getAllContacts());\n}, [dispatch]);\n\n  const [newContact, setNewContact] = useState({ name: '', number: '' });\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleCreateContact = async () => {\n    const { name, number } = newContact;\n    const nameExists = contacts.some(contact => contact.name === name);\n    const numberExists = contacts.some(contact => contact.number === number);\n\n    if (nameExists || numberExists) {\n      message.warning(`${name} or entered ${number} number is already in contacts.`);\n\n      return;\n    }\n    dispatch(addContacts(newContact));\n    setNewContact({ name: '', number: '' });\n    message.success('Contact added!');\n  };\n\n  const filteredContacts = contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleDeleteContact = async id => {\n    dispatch(deleteContacts(id));\n    message.success('Contact removed!');\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h3\" align=\"center\">\n        Contacts\n      </Typography>\n      {isLoading ? (\n        <Loader/>\n      ) : (\n        <>\n          <div>\n            <Box maxWidth=\"100vh\"\n              flexDirection=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              paddingLeft={50}\n            >\n              <TextField\n                type=\"text\"\n                placeholder=\"Name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                value={newContact.name}\n                onChange={e => setNewContact({ ...newContact, name: e.target.value })}\n              />\n            </Box>\n            <Box maxWidth=\"100vh\"\n              flexDirection=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              paddingLeft={50}\n            >\n              <TextField\n                type=\"tel\"\n                placeholder=\"Number\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                value={newContact.number}\n                onChange={e => setNewContact({ ...newContact, number: e.target.value })}\n              />\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={handleCreateContact}\n                sx={{\n                  width: '200px',\n                  display: 'block',\n                  margin: '0 auto',\n                }}\n              >\n                Create Contact\n              </Button>\n            </Box>\n          </div>\n          <Box maxWidth=\"100vh\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            paddingLeft={50}\n          >\n            <div>\n              <TextField\n                type=\"text\"\n                placeholder=\"Search Contacts\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n            </div>\n          </Box>\n          <Box maxWidth=\"100vh\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            paddingLeft={50}\n          >\n            <List>\n              {filteredContacts?.map(contact => (\n                <ListItem key={contact.id}>\n                  <ListItemText primary={contact.name} />\n                  <ListItemText primary={contact.number} />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteContact(contact.id)}\n                    >\n                      x\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </Box>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsUser;\n","import ContactsUser from \"components/contacts/Contacts\";\n\nconst Contacts = () => {\n  return (\n    <>\n      <ContactsUser/>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","dispatch","useDispatch","useSelector","isLoading","selectIsLoading","useEffect","getAllContacts","useState","name","number","newContact","setNewContact","searchQuery","setSearchQuery","handleCreateContact","nameExists","some","contact","numberExists","message","addContacts","filteredContacts","filter","toLowerCase","includes","handleDeleteContact","id","deleteContacts","Typography","variant","align","Loader","Box","maxWidth","flexDirection","alignItems","justifyContent","paddingLeft","TextField","type","placeholder","margin","fullWidth","value","onChange","e","target","Button","color","onClick","sx","width","display","List","map","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","edge"],"sourceRoot":""}